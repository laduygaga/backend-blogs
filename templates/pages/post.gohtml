{{define "content"}}
    <form method="post" hx-boost="true" action="{{call .ToURL "post.post"}}">
        <div class="field">
            <label for="title" class="label">Title</label>
            <div class="control">
                <input type="text" id="title" name="title" class="input {{.Form.Submission.GetFieldStatusClass "Title"}}" value="{{.Form.Title}}">
                {{template "field-errors" (.Form.Submission.GetFieldErrors "Name")}}
            </div>
        </div>
        <div class="field">
            <label for="body" class="label">Body</label>
            <div class="control">
				<input id="editor" name="body" class="input {{.Form.Submission.GetFieldStatusClass "Body"}}" value="{{.Form.Body}}">
                {{template "field-errors" (.Form.Submission.GetFieldErrors "Body")}}
            </div>
        </div>
        <div class="field is-grouped">
            <p class="control">
                <button class="button is-primary">Post</button>
            </p>
            <p class="control">
                <a href="{{call .ToURL "home"}}" class="button is-light">Cancel</a>
            </p>
        </div>
        {{template "csrf" .}}
    </form>

	<script>
		function initializeEditor() {
			ClassicEditor
				.create(document.querySelector('#editor'), {
					ckfinder: {
						uploadUrl: '/post/upload',
					},
				})
				.then(editor => {
					editor.model.document.on('change', () => {
						const editorValue = editor.getData();
						document.querySelector('#editor').value = editorValue;
					});
				})
				.catch(error => {
					console.error('CKEditor initialization failed:', error);
				});
		}

		// Check if the element with ID 'editor' exists before initializing the editor
		if (document.getElementById('editor')) {
			initializeEditor();
		} else {
			// If the element doesn't exist, wait for the DOMContentLoaded event
			document.addEventListener('DOMContentLoaded', initializeEditor);
		}
	</script>

{{end}}
